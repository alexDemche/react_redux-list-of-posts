{"version":3,"sources":["store/postsList/actions.js","store/postsList/reducers.js","store/reducers.js","components/User/User.js","components/Comment/Comment.js","components/Comment/CommentContainer.js","components/CommentList/CommentList.js","components/Post/Post.js","components/Post/PostContainer.js","components/PostsList/PostsList.js","components/PostsList/PostsListContainer.js","App.js","serviceWorker.js","index.js"],"names":["POSTS_URL","COMMENTS_URL","USERS_URL","ACTION_TYPES","POSTS_LIST_FETCH_DATA_IS_LOADING","POSTS_LIST_FETCH_DATA_SUCCESS","POSTS_LIST_FETCH_DATA_ERROR","DELETE_POST","DELETE_COMMENT","postsListFetchData","dispatch","type","isLoading","Promise","all","fetch","then","_ref","_ref2","Object","slicedToArray","todosResponse","usersResponse","commentsResponse","ok","Error","statusText","json","_ref3","posts","_ref4","postsData","usersData","commentsData","postsList","map","post","_objectSpread","user","find","id","userId","comments","filter","comment","postId","payload","catch","error","postsListFetchDataError","concat","message","initialState","isDataLoaded","postsListReducer","state","arguments","length","undefined","action","reducers_objectSpread","rootReducer","combineReducers","postsListState","User","name","email","_user$address","address","city","street","react_default","a","createElement","className","Comment","deleteComment","body","toUpperCase","slice","onClick","connect","CommentList","CommentContainer","key","Post","deletePost","title","components_User_User","components_CommentList_CommentList","PostList","loadDataPosts","Fragment","disabled","style","display","PostContainer","PostsList","middlewares","thunkMiddleware","store","createStore","composeWithDevTools","applyMiddleware","apply","App","es","PostsListContainer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.951d6df1.chunk.js","sourcesContent":["const POSTS_URL = 'https://jsonplaceholder.typicode.com/posts';\nconst COMMENTS_URL = 'https://jsonplaceholder.typicode.com/comments';\nconst USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const ACTION_TYPES = {\n  POSTS_LIST_FETCH_DATA_IS_LOADING: 'POSTS_FETCH_DATA_IS_LOADING',\n  POSTS_LIST_FETCH_DATA_SUCCESS: 'POSTS_FETCH_DATA_SUCCESS',\n  POSTS_LIST_FETCH_DATA_ERROR: 'POSTS_FETCH_DATA_ERROR',\n  DELETE_POST: 'DELETE_POST',\n  DELETE_COMMENT: 'DELETE_COMMENT',\n};\n\nfunction postsListFetchDataIsLoading() {\n  return {\n    type: ACTION_TYPES.POSTS_LIST_FETCH_DATA_IS_LOADING,\n    isLoading: true,\n  };\n}\n\nfunction postsListFetchDataSuccess(posts) {\n  return {\n    type: ACTION_TYPES.POSTS_LIST_FETCH_DATA_SUCCESS,\n    isLoading: false,\n    payload: posts,\n  };\n}\n\nfunction postsListFetchDataError(error) {\n  return {\n    type: ACTION_TYPES.POSTS_LIST_FETCH_DATA_ERROR,\n    isLoading: false,\n    payload: error,\n  };\n}\n\nexport function deletePost(id) {\n  return {\n    type: ACTION_TYPES.DELETE_POST,\n    payload: id,\n  };\n}\n\nexport function deleteComment(id) {\n  return {\n    type: ACTION_TYPES.DELETE_COMMENT,\n    payload: id,\n  };\n}\n\nexport function postsListFetchData() {\n  return (dispatch) => {\n    dispatch(postsListFetchDataIsLoading());\n\n    Promise.all([\n      fetch(POSTS_URL),\n      fetch(USERS_URL),\n      fetch(COMMENTS_URL),\n    ])\n      .then(([todosResponse, usersResponse, commentsResponse]) => {\n        if (!todosResponse.ok) {\n          throw new Error(todosResponse.statusText);\n        }\n        if (!usersResponse.ok) {\n          throw new Error(usersResponse.statusText);\n        }\n\n        if (!commentsResponse.ok) {\n          throw new Error(commentsResponse.statusText);\n        }\n\n        return Promise.all(\n          [todosResponse.json(), usersResponse.json(), commentsResponse.json()]\n        );\n      })\n      .then(([postsData, usersData, commentsData]) => {\n        const postsList = postsData.map(post => ({\n          ...post,\n          user: usersData.find(user => user.id === post.userId),\n          comments: commentsData.filter(comment => comment.postId === post.id),\n        }));\n        dispatch(postsListFetchDataSuccess(postsList));\n      })\n      .catch(error => (\n        dispatch(postsListFetchDataError(`${error.message} data from API`))));\n  };\n}\n","import { ACTION_TYPES } from './actions';\n\nconst initialState = {\n  isLoading: false,\n  isDataLoaded: false,\n  error: '',\n  postsList: [],\n};\n\nfunction postsListReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTION_TYPES.POSTS_LIST_FETCH_DATA_IS_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n\n    case ACTION_TYPES.POSTS_LIST_FETCH_DATA_SUCCESS:\n      return {\n        ...state,\n        isLoading: true,\n        isDataLoaded: true,\n        postsList: action.payload,\n      };\n\n    case ACTION_TYPES.POSTS_LIST_FETCH_DATA_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n\n    case ACTION_TYPES.DELETE_POST:\n      return {\n        ...state,\n        postsList: state.postsList.filter(post => post.id !== action.payload),\n      };\n\n    case ACTION_TYPES.DELETE_COMMENT:\n      return {\n        ...state,\n        postsList: state.postsList.map(post => ({\n          ...post,\n          comments: post.comments.filter(comment => comment.id !== action.payload),\n        })),\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default postsListReducer;\n","import { combineReducers } from 'redux';\nimport postsListReducer from './postsList/reducers';\n\nconst rootReducer = combineReducers({\n  postsListState: postsListReducer,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\n\nfunction User({ user }) {\n  const { name, email } = user;\n  const { city, street } = user.address;\n\n  return (\n    <div className=\"user\">\n      <h3 className=\"user__name\">\n        By\n        {' '}\n        {name}\n      </h3>\n      <p>{email}</p>\n      <p>\n        <span>\n          city:&nbsp;\n          {city}\n        </span>\n        <span>\n          , street:&nbsp;\n          {street}\n        </span>\n      </p>\n      {/* <hr className=\"user__bottom-line\" /> */}\n    </div>\n  );\n}\n\nconst shape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  address: PropTypes.shape({\n    street: PropTypes.string.isRequired,\n    city: PropTypes.string.isRequired,\n  }),\n});\n\nUser.propTypes = {\n  user: shape.isRequired,\n};\n\nexport default User;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport './Comment.css';\n\nconst Comment = ({ comment, deleteComment }) => {\n  const {\n    name, email, body,\n  } = comment;\n\n  return (\n    <div className=\"comment\">\n      <h5>{`${name[0].toUpperCase()}${name.slice(1)}`}</h5>\n      <p>{body}</p>\n      <p className=\"comment_email\">{email}</p>\n      <button\n        className=\"button button--delete\"\n        onClick={() => deleteComment(comment.id)}\n        type=\"button\"\n      >\n        delete comment\n      </button>\n      <hr className=\"comment__bottom-line\" />\n    </div>\n  );\n};\n\nconst shape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n});\n\nComment.propTypes = {\n  comment: shape.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n};\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport Comment from './Comment';\nimport { deleteComment } from '../../store/postsList/actions';\n\nconst mapStateToProps = state => ({\n  posts: state.postsListState.postsList,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteComment: id => dispatch(deleteComment(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommentContainer from '../Comment/CommentContainer';\n\nconst CommentList = ({ comments }) => comments.map(comment => (\n  <CommentContainer comment={comment} key={comment.id} />\n));\n\nconst shape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n});\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(shape).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport User from '../User/User';\nimport CommentList from '../CommentList/CommentList';\nimport './Post.css';\n\nconst Post = ({ post, deletePost }) => (\n  <div className=\"post\">\n    <h1 className=\"post__header\">\n      Post #&nbsp;\n      {post.id}\n    </h1>\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__body\">{post.body}</p>\n    <User user={post.user} />\n    <button\n      onClick={() => deletePost(post.id)}\n      type=\"button\"\n      className=\"button button--delete\"\n    >\n      delete Post\n    </button>\n    <br />\n    <div className=\"post__footer\">Comments:</div>\n    <CommentList comments={post.comments} />\n  </div>\n);\n\nconst shape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n});\n\nPost.propTypes = {\n  post: shape.isRequired,\n  deletePost: PropTypes.func.isRequired,\n};\n\nexport default Post;\n","import { connect } from 'react-redux';\nimport { deletePost } from '../../store/postsList/actions';\nimport Post from './Post';\n\nconst mapStateToProps = state => ({\n  posts: state.postsListState.postsList,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deletePost: id => dispatch(deletePost(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostContainer from '../Post/PostContainer';\n\nconst PostList = ({\n  posts, loadDataPosts, isDataLoaded, isLoading,\n}) => {\n  const loadPosts = () => loadDataPosts();\n\n  return (\n    <>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={loadPosts}\n        disabled={isLoading}\n        style={isDataLoaded ? { display: 'none' } : { display: 'initial' }}\n      >\n        {isLoading ? 'loading' : 'Load Posts'}\n      </button>\n      {posts.map(post => <PostContainer post={post} key={post.id} />)}\n    </>\n  );\n};\n\nconst shape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n});\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(shape).isRequired,\n  loadDataPosts: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  isDataLoaded: PropTypes.bool.isRequired,\n};\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport { postsListFetchData } from '../../store/postsList/actions';\nimport PostsList from './PostsList';\n\nconst mapStateToProps = state => ({\n  posts: state.postsListState.postsList,\n  isDataLoaded: state.postsListState.isDataLoaded,\n  isLoading: state.postsListState.isLoading,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadDataPosts: () => dispatch(postsListFetchData()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\n","import React from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './store/reducers';\nimport PostsListContainer from './components/PostsList/PostsListContainer';\n\nconst middlewares = [thunkMiddleware];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nclass App extends React.Component {\n  componentDidMount() { }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"app\">\n          <h1>Posts List</h1>\n          <PostsListContainer />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}